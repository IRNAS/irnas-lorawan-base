"""
This python script will generate a version.h file in src folder with macro VERSION equal to
the version provided. Then it will do commit and push. At the end it will create github release.
"""
import json
import os
import sys
import argparse
from argparse import RawTextHelpFormatter
from github_release import gh_release_create
import subprocess as cmd

### Command line argument parser

# Intro message
intro = "This is an automated release tool!\n\n"
intro += "Make sure that you did 'export GITHUB_TOKEN=<YOUR_TOKEN>' before using this tool, here is how to do it:\n"
intro += "https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line"

# Parser setup
parser = argparse.ArgumentParser(description=intro, formatter_class=RawTextHelpFormatter)
parser.add_argument("--version", type=str,required=True, help="This is a version of release, something like v1.2.5, number after last dot can consist of two digits, other two numbers have to be single digit.")
parser.add_argument("--body", type=str,required=True, help="This is the visible text in release body.")
parser.add_argument("--branch", type=str,required=True, help="This is a branch that the release will be made from.")
parser.add_argument("--publish", type=str,required=True, help="What kind of release is, options are: 'release', 'prerelease'.")

# Display help message if no arguments are provided
if len(sys.argv)== 1:
    parser.print_help(sys.stderr)
    sys.exit(1)
args = parser.parse_args()

# Make sure publish is correct
if args.publish == "release":
    git_publish = True
elif args.publish == "prerelease":
    git_publish = False
else :
    print("Wrong publish option, try again")
    sys.exit(1)

# Remove dots and 'v' forversion.h file
actual_version = args.version.encode().decode()
version = args.version.replace(".","")
version = version.replace("v","")

# Lets first create content of our version.h and then create it
version_h = "#ifndef VERSION_H\n"
version_h += "#define VERSION_H\n\n"
version_h += "// This file was generated by scripts/release_build.py file.\n\n"
version_h += '#define VERSION ' + '"' + version + '"\n\n'
version_h += "#endif /* VERSION_H */\n"
version_h += "//*** end of file ***\n"

with open("../src/version.h", "w+") as f:
    f.write(version_h)


cmd.run("cd ../src && arduino-cli compile --fqbn TleraCorp:stm32l0:IRNAS-env-module-L072Z main.ino", check=True, shell=True)
# Make a commit, to include new version.h in it
# Go into root dir and add everything
cmd.run("cd .. && git add .", check=True, shell=True)
# Commit with a version as message
command = 'git commit -m "{}"'.format(actual_version)

cmd.run(command, check=True, shell=True)
# Push
cmd.run("git push", check=True, shell=True)

# Get the project name into a variable
project_name = os.path.basename(os.path.realpath("../"))
repo = "IRNAS/" + project_name

# Create a release, thats it, one command

gh_release_create(repo, actual_version, publish=git_publish, target_commitish=args.branch, name=actual_version, body=args.body)
